<!DOCTYPE html>
<html>
<head>
    <title>MYP Resource Hub</title>
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <script src="https://cdn.tailwindcss.com"></script>
    <style>
        @import url('https://fonts.googleapis.com/css2?family=Inter:wght@400;600;700&display=swap');
        body {
            font-family: 'Inter', sans-serif;
            background-color: #f7fafc;
        }
        .accordion-toggle {
            transition: transform 0.2s ease-in-out;
        }
        .accordion-toggle.expanded {
            transform: rotate(90deg);
        }
        .file-icon {
            width: 24px;
            height: 24px;
        }
        .fade-in {
            animation: fadeIn 0.5s ease-in-out;
        }
        @keyframes fadeIn {
            from { opacity: 0; transform: translateY(10px); }
            to { opacity: 1; transform: translateY(0); }
        }
        * {
            border-radius: 0.5rem;
        }
        .custom-button {
            transition: all 0.3s ease;
            box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06);
            padding: 0.75rem 1.5rem;
        }
        .custom-button:hover {
            transform: translateY(-2px);
            box-shadow: 0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05);
        }
    </style>
</head>
<body class="p-6 md:p-12 min-h-screen flex items-center justify-center">

    <div class="bg-white p-8 rounded-xl shadow-xl max-w-4xl w-full text-center">
        <h1 class="text-3xl font-bold text-gray-800">MYP Resource Hub</h1>
        <p class="text-gray-500 mt-2">Parcourez vos ressources Google Drive</p>

        <div id="auth-container" class="mt-8">
            <button id="authorize_button" class="custom-button bg-blue-500 hover:bg-blue-600 text-white font-bold rounded-lg transition-colors duration-200">
                Sélectionner le dossier MYP
            </button>
            <button id="signout_button" class="custom-button bg-gray-500 hover:bg-gray-600 text-white font-bold rounded-lg ml-2 hidden">
                Déconnexion
            </button>
        </div>

        <div id="loading" class="text-center text-gray-500 p-8 hidden">
            <svg class="animate-spin h-8 w-8 text-blue-500 mx-auto" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
                <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
            </svg>
            <p class="mt-4">Chargement de vos ressources...</p>
        </div>

        <div id="resources" class="hidden mt-8 text-left"></div>
        <div id="message-container" class="mt-8 text-center text-gray-600 hidden">
            <p id="main-message"></p>
        </div>
    </div>

    <script src="https://apis.google.com/js/api.js"></script>
    <script src="https://accounts.google.com/gsi/client"></script>
    <script>
        // NOTE: These are your API Key and Client ID from Google Cloud Console.
        // They have been updated based on the information you provided.
        const API_KEY = 'AIzaSyDkp6okMRGpspNiKtjZGurpPJsjSqX50Fs';
        const CLIENT_ID = '588264526022-50fo7vbji9qqb91kpna0pd3mhi3incq4.apps.googleusercontent.com';

        const SCOPES = 'https://www.googleapis.com/auth/drive.readonly';
        
        let pickerApiLoaded = false;
        let tokenClient;

        const authorizeButton = document.getElementById('authorize_button');
        const signoutButton = document.getElementById('signout_button');
        const loadingEl = document.getElementById('loading');
        const resourcesEl = document.getElementById('resources');
        const messageContainer = document.getElementById('message-container');
        const mainMessageEl = document.getElementById('main-message');

        /**
         * On load, called to load the auth2 library and API client library.
         */
        function handleClientLoad() {
            gapi.load('client:picker', initGapiClient);
        }
        
        /**
         * Initializes the API client library and sets up sign-in state
         * listeners.
         */
        async function initGapiClient() {
            try {
                await gapi.client.init({
                    'apiKey': API_KEY
                });
                
                tokenClient = google.accounts.oauth2.initTokenClient({
                    client_id: CLIENT_ID,
                    scope: SCOPES,
                    callback: (response) => {
                        if (response.error !== undefined) {
                            console.error('Error during token retrieval:', response);
                            handleError("Erreur d'authentification. Vérifiez les paramètres de votre client ID dans la console Google Cloud.");
                        } else {
                            updateSignInStatus(true);
                            openPicker();
                        }
                    },
                });

                authorizeButton.onclick = handleAuthClick;
                signoutButton.onclick = handleSignoutClick;
                updateSignInStatus(false);

            } catch (err) {
                console.error("Error loading gapi client:", err);
                handleError("Une erreur s'est produite lors de l'initialisation de l'API. Vérifiez votre clé API et votre ID client.");
            }
        }

        /**
         * Called when the Picker API has finished loading.
         */
        function onPickerApiLoad() {
            pickerApiLoaded = true;
        }

        /**
         * Called when the signed in status changes, to update the UI
         * appropriately. After the first load, this function is called
         * when the user signs in or out.
         * @param {boolean} isSignedIn Whether the user is signed in.
         */
        function updateSignInStatus(isSignedIn) {
            if (isSignedIn) {
                authorizeButton.classList.add('hidden');
                signoutButton.classList.remove('hidden');
                messageContainer.classList.add('hidden');
            } else {
                authorizeButton.classList.remove('hidden');
                signoutButton.classList.add('hidden');
                messageContainer.classList.remove('hidden');
                mainMessageEl.innerText = "Veuillez vous connecter pour sélectionner votre dossier MYP.";
            }
        }

        /**
         * Sign in the user upon button click.
         */
        function handleAuthClick(event) {
            tokenClient.requestAccessToken({prompt: 'consent'});
        }

        /**
         * Sign out the user upon button click.
         */
        function handleSignoutClick(event) {
            const token = gapi.client.getToken();
            if (token !== null) {
                google.accounts.oauth2.revoke(token.access_token);
                gapi.client.setToken('');
                updateSignInStatus(false);
                resourcesEl.innerHTML = '';
            }
        }

        /**
         * Create and render a Picker object for selecting a folder.
         */
        function openPicker() {
            if (!pickerApiLoaded) {
                handleError("Le chargement de l'API Picker est en cours. Veuillez réessayer.");
                return;
            }

            const view = new google.picker.View(google.picker.ViewId.FOLDERS);
            view.setMimeTypes('application/vnd.google-apps.folder');

            const picker = new google.picker.PickerBuilder()
                .addView(view)
                .setOAuthToken(gapi.client.getToken().access_token)
                .setDeveloperKey(API_KEY)
                .setCallback(pickerCallback)
                .build();

            picker.setVisible(true);
        }

        /**
         * A callback function that is called when a file or folder is picked.
         * @param {Object} data The data object from the picker.
         */
        function pickerCallback(data) {
            if (data.action === google.picker.Action.PICKED) {
                const folderId = data.docs[0].id;
                loadingEl.classList.remove('hidden');
                resourcesEl.classList.add('hidden');
                messageContainer.classList.add('hidden');
                listFolderContents(folderId);
            } else if (data.action === google.picker.Action.CANCEL) {
                // Gère l'annulation du sélecteur par l'utilisateur
                handleError("La sélection du dossier a été annulée. Veuillez réessayer pour continuer.");
            }
        }

        /**
         * Lists all folders and files inside a given folder ID.
         * @param {string} folderId The ID of the folder to list.
         */
        async function listFolderContents(folderId, depth = 0) {
            try {
                const response = await gapi.client.drive.files.list({
                    q: `'${folderId}' in parents and trashed = false`,
                    fields: 'files(id, name, mimeType, webViewLink)'
                });

                const items = response.result.files;
                if (!items || items.length === 0) {
                    if (depth === 0) {
                        handleError("Le dossier sélectionné est vide ou ne contient pas de sous-dossiers.");
                    }
                    return '';
                }

                // Sort files and folders separately
                const sortedItems = items.sort((a, b) => {
                    const isAFolder = a.mimeType === 'application/vnd.google-apps.folder';
                    const isBFolder = b.mimeType === 'application/vnd.google-apps.folder';
                    if (isAFolder && !isBFolder) return -1;
                    if (!isAFolder && isBFolder) return 1;
                    return a.name.localeCompare(b.name);
                });

                let html = '';
                for (const item of sortedItems) {
                    if (item.mimeType === 'application/vnd.google-apps.folder') {
                        const subContent = await listFolderContents(item.id, depth + 1);
                        html += `
                            <div class="mb-2 fade-in pl-2">
                                <button class="flex items-center justify-between w-full p-3 text-left font-medium text-gray-700 bg-gray-50 hover:bg-gray-100 transition-colors duration-200" onclick="toggleAccordion(this)">
                                    <div class="flex items-center">
                                        <svg class="h-5 w-5 mr-2" fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg">
                                            <path d="M2 6a2 2 0 012-2h5l2 2h5a2 2 0 012 2v6a2 2 0 01-2 2H4a2 2 0 01-2-2V6z"></path>
                                        </svg>
                                        ${item.name}
                                    </div>
                                    <svg class="accordion-toggle h-5 w-5" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor">
                                        <path fill-rule="evenodd" d="M7.293 14.707a1 1 0 010-1.414L10.586 10l-3.293-3.293a1 1 0 011.414-1.414l4 4a1 1 0 010 1.414l-4 4a1 1 0 01-1.414 0z" clip-rule="evenodd" />
                                    </svg>
                                </button>
                                <div class="accordion-content hidden pl-4 mt-2">
                                    ${subContent}
                                </div>
                            </div>
                        `;
                    } else {
                        html += `
                            <a href="${item.webViewLink}" target="_blank" class="flex items-center p-2 mb-1 text-gray-600 hover:text-blue-600 hover:bg-blue-50 transition-colors duration-200 fade-in">
                                <span class="file-icon mr-2">${getFileIcon(item.mimeType)}</span>
                                ${item.name}
                            </a>
                        `;
                    }
                }

                if (depth === 0) {
                    loadingEl.classList.add('hidden');
                    resourcesEl.innerHTML = html;
                    resourcesEl.classList.remove('hidden');
                }

                return html;

            } catch (err) {
                console.error("Error listing files:", err);
                handleError("Impossible de lister les fichiers. Veuillez vous assurer d'avoir accordé les permissions d'accès en lecture.");
            }
        }

        /**
         * Handles errors and displays a message to the user.
         * @param {string} error The error message.
         */
        function handleError(error) {
            loadingEl.classList.add('hidden');
            resourcesEl.classList.add('hidden');
            messageContainer.classList.remove('hidden');
            mainMessageEl.innerText = error;
        }

        /**
         * Gets a relevant icon based on the MIME type.
         * @param {string} mimeType The MIME type of the file.
         * @return {string} An SVG icon.
         */
        function getFileIcon(mimeType) {
            if (mimeType.includes('pdf')) {
                return `<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor"><path stroke-linecap="round" stroke-linejoin="round" d="M19.5 14.25v-2.75a2.25 2.25 0 0 0-2.25-2.25H9.75a2.25 2.25 0 0 0-2.25 2.25v2.75m14.25 3.75H4.5a2.25 2.25 0 0 1-2.25-2.25V6.75a2.25 2.25 0 0 1 2.25-2.25h9a2.25 2.25 0 0 1 2.25 2.25v2.75m-3.75 3.75V19.5" /></svg>`;
            } else if (mimeType.includes('audio')) {
                return `<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor"><path stroke-linecap="round" stroke-linejoin="round" d="M9 13.5l4.5 4.5 4.5-4.5M9 19.5l4.5-4.5 4.5 4.5" /></svg>`;
            } else if (mimeType.includes('video')) {
                return `<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor"><path stroke-linecap="round" stroke-linejoin="round" d="M16.023 9.497V2.5A2.25 2.25 0 0 0 13.773 0H2.25A2.25 2.25 0 0 0 0 2.25v16.5A2.25 2.25 0 0 0 2.25 21h11.523a2.25 2.25 0 0 0 2.25-2.25v-7.003L21.75 9.75 16.023 9.497Z" /></svg>`;
            } else if (mimeType.includes('form')) {
                return `<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor"><path stroke-linecap="round" stroke-linejoin="round" d="M19.5 14.25v-2.75a2.25 2.25 0 0 0-2.25-2.25h-5.5a2.25 2.25 0 0 0-2.25 2.25v2.75m-3.75 3.75h14.25a2.25 2.25 0 0 0 2.25-2.25V6.75a2.25 2.25 0 0 0-2.25-2.25H4.5a2.25 2.25 0 0 0-2.25 2.25V18a2.25 2.25 0 0 0 2.25 2.25Z" /></svg>`;
            } else {
                return `<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor"><path stroke-linecap="round" stroke-linejoin="round" d="M19.5 14.25v-2.75a2.25 2.25 0 0 0-2.25-2.25h-5.5a2.25 2.25 0 0 0-2.25 2.25v2.75m-3.75 3.75h14.25a2.25 2.25 0 0 0 2.25-2.25V6.75a2.25 2.25 0 0 0-2.25-2.25H4.5a2.25 2.25 0 0 0-2.25 2.25V18a2.25 2.25 0 0 0 2.25 2.25Z" /></svg>`;
            }
        }
        
        /**
         * Toggles the accordion section.
         * @param {HTMLElement} button The button that was clicked.
         */
        window.toggleAccordion = function(button) {
            const content = button.nextElementSibling;
            const icon = button.querySelector('.accordion-toggle');
            if (content.classList.contains('hidden')) {
                content.classList.remove('hidden');
                icon.classList.add('expanded');
            } else {
                content.classList.add('hidden');
                icon.classList.remove('expanded');
            }
        }

        // Initial load of Google APIs
        handleClientLoad();
    </script>
</body>
</html>
